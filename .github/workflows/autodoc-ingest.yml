name: Autodoc Webhook Ingest

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**.md'
      - 'docs/**/*.md'
      - 'docs/**/**.md'
  workflow_dispatch:

jobs:
  ingest:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    # yamllint disable rule:line-length
    # github-actions-linter-disable context-access
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Determine changed docs
        id: changes
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # On manual run, ingest all docs
            git ls-files 'docs/**/*.md' > changed.txt || true
          else
            BEFORE="${{ github.event.before }}"
            AFTER="${{ github.sha }}"
            if [ -z "$BEFORE" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
              BEFORE="HEAD~1"
            fi
            git diff --name-only "$BEFORE" "$AFTER" -- 'docs/**/*.md' > changed.txt || true
          fi
          CHANGED_COUNT=$(wc -l < changed.txt | tr -d ' ')
          echo "changed_count=$CHANGED_COUNT" >> $GITHUB_OUTPUT
          echo "Changed files:" && cat changed.txt || true

      - name: Validate secrets configuration
        run: |
          if [ -z "${{ secrets.AUTODOC_INGEST_WEBHOOK }}" ]; then
            echo 'ERROR: AUTODOC_INGEST_WEBHOOK secret is not set' >&2
            echo 'Please configure this secret in repository settings: Settings → Secrets and variables → Actions' >&2
            exit 1
          fi
          if [ -z "${{ secrets.AUTODOC_INGEST_SECRET }}" ]; then
            echo 'ERROR: AUTODOC_INGEST_SECRET (HMAC) is required for ingestion' >&2
            echo 'Please configure this secret in repository settings: Settings → Secrets and variables → Actions' >&2
            exit 1
          fi
          echo "✓ Required secrets are configured"

      - name: Post changes to autodoc webhook
        if: steps.changes.outputs.changed_count != '0'
        env:
          WEBHOOK_URL: ${{ secrets.AUTODOC_INGEST_WEBHOOK }}
          WEBHOOK_SECRET: ${{ secrets.AUTODOC_INGEST_SECRET }}
          AUTODOC_TENANT_ID: ${{ secrets.AUTODOC_TENANT_ID }}
          AUTODOC_USER_ID: ${{ secrets.AUTODOC_USER_ID }}
          AUTODOC_PROJECT_ID: ${{ secrets.AUTODOC_PROJECT_ID }}
        run: |
          set -euo pipefail
          installed_jq=$(command -v jq || true)
          if [ -z "$installed_jq" ]; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          status=0
          while IFS= read -r file; do
            [ -z "$file" ] && continue
            echo "Posting $file"
            content=$(cat "$file")
            # Chunk content to ~1000 chars with 150 overlap (simple approximated chunking)
            chunks_json="[]"
            len=${#content}
            i=0
            size=1000
            overlap=150
            while [ $i -lt $len ]; do
              end=$(( i + size ))
              if [ $end -gt $len ]; then end=$len; fi
              chunk=$(printf '%s' "$content" | sed -n "1h;1,${end}p" | tail -c +$((i+1)))
              # escape JSON
              esc=$(printf '%s' "$chunk" | jq -Rs .)
              chunks_json=$(jq -c --argjson c "$esc" '. + [ $c | fromjson ]' <<< "$chunks_json")
              if [ $end -ge $len ]; then break; fi
              i=$(( end - overlap ))
              if [ $i -lt 0 ]; then i=0; fi
            done
            payload=$(jq -n \
              --arg src 'cerebral-deployment/docs' \
              --arg path "$file" \
              --arg repo '${{ github.repository }}' \
              --arg commit '${{ github.sha }}' \
              --arg tenant "${AUTODOC_TENANT_ID:-}" \
              --arg user "${AUTODOC_USER_ID:-}" \
              --arg project "${AUTODOC_PROJECT_ID:-}" \
              --argjson chunks "$chunks_json" \
              '{source:$src, file_path:$path, chunks:$chunks, repo:$repo, commit:$commit, meta:{tenant_id:$tenant, user_id:$user, project_id:$project}}')
            # Compute required HMAC signature header
            sig=$(printf '%s' "$payload" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" | awk '{print $NF}')
            sig_hdr="-H X-Signature-256:sha256=$sig"
            # retry up to 3 times
            attempt=1
            until curl -sS -X POST "$WEBHOOK_URL" -H 'Content-Type: application/json' $sig_hdr --data "$payload" -o /tmp/resp.txt -w "%{http_code}" | tee /tmp/code.txt | grep -qE "^(2..)"; do
              code=$(cat /tmp/code.txt)
              echo "Attempt $attempt failed (HTTP $code) for $file" >&2
              if [ $attempt -ge 3 ]; then status=1; break; fi
              attempt=$((attempt+1))
              sleep $((attempt*2))
            done
            [ $status -ne 0 ] && break
          done < changed.txt
          exit $status


